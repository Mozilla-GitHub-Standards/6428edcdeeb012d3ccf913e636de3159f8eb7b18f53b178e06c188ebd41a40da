#!/bin/bash
#
# Clone source repo to be tested and run tests
#


if [ $# -ne 4 ]; then
  echo 'arguments: <repo_url> <sha> <ref_repo_url> <temp_path>'
  echo
  exit
fi


#
# Set up vars
#
TARGET_URL=$1
SHA=$2
REF_URL=$3
# Get absolute path for current dir
SCRIPT_DIR="$( cd "$( dirname "$0" )" && pwd )"
# Hack to get absolute path for tmp path
mkdir -p $4; cd $4
TMP_DIR="$( cd "$( dirname "$0" )" && pwd )"
TARGET_DIR=$TMP_DIR/tests/$SHA

if [ -d $TARGET_DIR ]; then
  rm -rf $TARGET_DIR
fi


#
# Fetch git repo to be tested (target), checkout desired sha
#
echo
echo "========== Cloning pull request repo"
mkdir -p $TARGET_DIR
cd $TARGET_DIR
git clone $TARGET_URL .; git checkout --quiet $SHA


#
# Pull reference snapshots
#
echo
echo "========== Cloning reference images repo"
mkdir -p $TARGET_DIR/test/ref
cd $TARGET_DIR/test/ref
git init; git pull -f $REF_URL


#
# Check if commit/SHA used to generate snapshots is present in target history
# and issue WARNING if not present
#
cd $TARGET_DIR/test/ref
ORIGINAL_SHA=`grep 'sha' REF-INFO | sed -e 's/sha \([0-9a-z]*\)/\1/g'` # get SHA from REF-INFO
COMMIT_EXISTS=`cd $TARGET_DIR; git log --format="%H" | grep $ORIGINAL_SHA` # ask git if SHA exists in index
if [ -z "$COMMIT_EXISTS" ]; then # is COMMIT_EXISTS zero-length? (i.e. no match)
  echo
  echo "***"
  echo "WARNING: This pull request does not contain the commit used to generate reference images."
  echo "         If the tests all pass, that should be OK."
  echo "         If not, it could be because of a missing feature in this pull request."
  echo "         Try merging the master branch from the main repo into this pull request,"
  echo "         and issuing another test."
  echo "***"
  echo "Commit used to create snapshots (REF-INFO file from reference repo):"
  cat $TARGET_DIR/test/ref/REF-INFO
  echo "***"
  echo
fi


#
# Copy existing PDFs *from* local cache
#
cd $TARGET_DIR
cp -n /tmp/pdf-cache/* test/pdfs


#
# Deploy test/ files, run tests
#
echo
echo "========== Running 'make test'"
cd $TARGET_DIR
cp -f $SCRIPT_DIR/test-files/browser_manifest.json ./test/resources/browser_manifests
cp -f $SCRIPT_DIR/test-files/test_manifest.json ./test 2>/dev/null
cp -f $SCRIPT_DIR/test-files/test.py ./test 2>/dev/null
Xvfb :1 1>/dev/null 2>/dev/null &
make test
killall -9 Xvfb 1>/dev/null 2>/dev/null


#
# Copy new PDFs *to* local cache
#
cd $TARGET_DIR
mkdir -p /tmp/pdf-cache
cp -n test/pdfs/*.pdf /tmp/pdf-cache


#
# Run linter
#
echo
echo "========== Running 'make lint'"
cd $TARGET_DIR
make lint


#
# Erase everything but eq.log and reftest-analyzer
#
cd $TARGET_DIR
mv -f test/eq.log . 2>/dev/null
mv -f test/resources/reftest-analyzer.xhtml . 2>/dev/null
find . ! -iname 'eq.log' -and ! -iname 'reftest-analyzer.xhtml' -delete
