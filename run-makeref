#!/bin/bash
#
# Clone source repo to create ref from, create ref
#

SCRIPT_PID=$$

if [ $# -ne 5 ]; then
  echo 'arguments: <main_repo_url> <requester_repo_url> <sha_pull_req> <ref_repo_url> <temp_path>'
  echo
  exit
fi
MAIN_URL=$1
TARGET_URL=$2
SHA=$3
REF_URL=$4
TMP_DIR=$5


#
# killtree(): Kills all descendant child processes
#
killtree() {
    local _pid=$1
    local _regex="[ ]*([0-9]+)[ ]+${_pid}"
    for _child in $(/bin/ps ax -o "pid= ppid=" | grep -E "${_regex}" | sed -E "s/${_regex}/\1/g"); do
        killtree ${_child}
    done
    kill -KILL ${_pid} 1>/dev/null 2>/dev/null
}

#
# Run killtree() upon signal
# NB: trap only works during "wait" or after a command is done
#
trap "killtree $SCRIPT_PID" SIGTERM SIGINT

#
# Set up vars
#
# Get absolute path for current dir
SCRIPT_DIR="$( cd "$( dirname "$0" )" && pwd )"
# Hack to get absolute path for tmp path
mkdir -p $TMP_DIR; cd $TMP_DIR
TMP_DIR="$( cd "$( dirname "$0" )" && pwd )"
TARGET_DIR=$TMP_DIR/tests/$SHA

if [ -d $TARGET_DIR ]; then
  rm -rf $TARGET_DIR
fi


#
# Fetch git repo to be used as ref (target), checkout desired sha
#
echo
echo "========== Cloning pull request repo"
mkdir -p $TARGET_DIR
cd $TARGET_DIR
git clone $TARGET_URL .; git checkout --quiet $SHA
if [ $? != 0 ]; then
  echo
  echo "***"
  echo "ERROR: Something went wrong."
  exit
fi


#
# Run linter - MUST COME BEFORE OVERWRITING ANY FILES!
#
echo
echo "========== Running 'make lint'"
cd $TARGET_DIR
make lint &
wait $!
if [ $? != 0 ]; then
  echo
  echo "***"
  echo "ERROR: Something went wrong."
  exit
fi



#
# Pull test/ from upstream, compare to pull request's
# If pull request contains changes to test/, use those files
#
echo
echo "========== Fetching test/ from upstream"
cd $TARGET_DIR
git remote add upstream $MAIN_URL; git fetch upstream
TEST_CHANGES="`git diff upstream/master...HEAD --name-only | grep -E '^test/'`"
if [ -z "$TEST_CHANGES" ]; then
  echo "No new test/ files in pull request. Using test/ from upstream."
  git checkout upstream/master test/
else
  echo
  echo "***"
  echo "WARNING: This pull request contains changes to test-related files in test/."
  echo "         The tests below will thus be performed as per these *new test files*."
  echo "         If upstream contains important tests not present in this PR, someone"
  echo "         will have to merge it here and run the tests again."
  echo "***"
fi


#
# Copy existing PDFs *from* local cache
#
cd $TARGET_DIR
cp -n /tmp/pdf-cache/* test/pdfs


#
# Deploy missing files, make ref set
#
echo
echo "========== Running 'make master'"
cd $TARGET_DIR
# Deploy Makefile for master
cp -f $SCRIPT_DIR/test-files/local.mk . 2>/dev/null
# Deploy missing test/ files
cp -f $SCRIPT_DIR/test-files/browser_manifest.json ./test/resources/browser_manifests 2>/dev/null
# prepare Xvfb
Xvfb :1 1>/dev/null 2>/dev/null &
XVFB_PID=$!
# make test
make master &
wait $!
if [ $? != 0 ]; then
  echo
  echo "***"
  echo "ERROR: Something went wrong."
  exit
fi
# kill Xvfb
kill -9 $XVFB_PID 1>/dev/null 2>/dev/null


#
# Copy new PDFs *to* local cache
#
cd $TARGET_DIR
mkdir -p /tmp/pdf-cache
cp -n test/pdfs/*.pdf /tmp/pdf-cache


if [ ! -d $TARGET_DIR/test/tmp ]; then
  echo
  echo "***"
  echo "ERROR (run-makeref): Could not find test/tmp snapshots!"
  exit
fi


#
# Push up-to-date reference snapshots
#
echo
echo "========== Pushing new snapshots to reference repo"
mkdir -p $TARGET_DIR/test/ref_repo
cd $TARGET_DIR/test/ref_repo
git init; git pull -f $REF_URL
cp -Rf ../tmp/* .
# generate REF-INFO
echo url $TARGET_URL > REF-INFO
echo sha $SHA >> REF-INFO
# push
./commit-push-clean


#
# Erase everything
#
echo
echo "========== Cleaning up"
rm -rf $TARGET_DIR

echo
echo "All done."
